   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"UART.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.init_UART,"ax",%progbits
  18              		.align	2
  19              		.global	init_UART
  20              		.code	16
  21              		.thumb_func
  23              	init_UART:
  24              	.LFB0:
  25              		.file 1 "../Sources/UART.c"
   1:../Sources/UART.c **** /*
   2:../Sources/UART.c ****  * UART.h
   3:../Sources/UART.c ****  *
   4:../Sources/UART.c ****  *  Created on: Mar 14, 2013
   5:../Sources/UART.c ****  *      Author: Arteko
   6:../Sources/UART.c ****  */
   7:../Sources/UART.c **** 
   8:../Sources/UART.c **** #include "UART.h"
   9:../Sources/UART.c **** 
  10:../Sources/UART.c **** void init_UART()
  11:../Sources/UART.c **** {	
  26              		.loc 1 11 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 82B0     		sub	sp, sp, #8
  34              	.LCFI1:
  35              		.cfi_def_cfa_offset 16
  36 0004 00AF     		add	r7, sp, #0
  37              	.LCFI2:
  38              		.cfi_def_cfa_register 7
  12:../Sources/UART.c **** 	/* Seleccionamos el reloj de la UART como el MCGIRCLK */
  13:../Sources/UART.c **** 	SIM_SOPT2 |= SIM_SOPT2_UART0SRC(3);
  39              		.loc 1 13 0
  40 0006 484A     		ldr	r2, .L8
  41 0008 4749     		ldr	r1, .L8
  42 000a 484B     		ldr	r3, .L8+4
  43 000c CB58     		ldr	r3, [r1, r3]
  44 000e C021     		mov	r1, #192
  45 0010 0905     		lsl	r1, r1, #20
  46 0012 1943     		orr	r1, r3
  47 0014 454B     		ldr	r3, .L8+4
  48 0016 D150     		str	r1, [r2, r3]
  14:../Sources/UART.c **** 	
  15:../Sources/UART.c **** 	/* Habilitamos el reloj de la UART */
  16:../Sources/UART.c **** 	SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
  49              		.loc 1 16 0
  50 0018 434A     		ldr	r2, .L8
  51 001a 4349     		ldr	r1, .L8
  52 001c 444B     		ldr	r3, .L8+8
  53 001e CB58     		ldr	r3, [r1, r3]
  54 0020 8021     		mov	r1, #128
  55 0022 C900     		lsl	r1, r1, #3
  56 0024 1943     		orr	r1, r3
  57 0026 424B     		ldr	r3, .L8+8
  58 0028 D150     		str	r1, [r2, r3]
  17:../Sources/UART.c **** 	
  18:../Sources/UART.c **** 	/* Deshabilitamos el open drain */
  19:../Sources/UART.c **** 	SIM_SOPT5 &=  ~SIM_SOPT5_UART0ODE_MASK;
  59              		.loc 1 19 0
  60 002a 3F4A     		ldr	r2, .L8
  61 002c 3E49     		ldr	r1, .L8
  62 002e 414B     		ldr	r3, .L8+12
  63 0030 CB58     		ldr	r3, [r1, r3]
  64 0032 191C     		mov	r1, r3
  65 0034 404B     		ldr	r3, .L8+16
  66 0036 1940     		and	r1, r3
  67 0038 3E4B     		ldr	r3, .L8+12
  68 003a D150     		str	r1, [r2, r3]
  20:../Sources/UART.c **** 	
  21:../Sources/UART.c **** 	/* La entrada del UART es la default */
  22:../Sources/UART.c **** 	SIM_SOPT5 &= ~SIM_SOPT5_UART0RXSRC_MASK;
  69              		.loc 1 22 0
  70 003c 3A4A     		ldr	r2, .L8
  71 003e 3A49     		ldr	r1, .L8
  72 0040 3C4B     		ldr	r3, .L8+12
  73 0042 CB58     		ldr	r3, [r1, r3]
  74 0044 0421     		mov	r1, #4
  75 0046 181C     		mov	r0, r3
  76 0048 8843     		bic	r0, r1
  77 004a 011C     		mov	r1, r0
  78 004c 394B     		ldr	r3, .L8+12
  79 004e D150     		str	r1, [r2, r3]
  23:../Sources/UART.c **** 	
  24:../Sources/UART.c **** 	/* La salida del UART es la default */
  25:../Sources/UART.c **** 	SIM_SOPT5 &= ~SIM_SOPT5_UART0TXSRC_MASK;
  80              		.loc 1 25 0
  81 0050 354A     		ldr	r2, .L8
  82 0052 3549     		ldr	r1, .L8
  83 0054 374B     		ldr	r3, .L8+12
  84 0056 CB58     		ldr	r3, [r1, r3]
  85 0058 0121     		mov	r1, #1
  86 005a 181C     		mov	r0, r3
  87 005c 8843     		bic	r0, r1
  88 005e 011C     		mov	r1, r0
  89 0060 344B     		ldr	r3, .L8+12
  90 0062 D150     		str	r1, [r2, r3]
  26:../Sources/UART.c **** 	
  27:../Sources/UART.c **** 	/* Para inicializar la confifuración de la UART es necesarios desactivar primero
  28:../Sources/UART.c **** 	 * el registro UART0_C2 */
  29:../Sources/UART.c **** 	UART0_C2 = 0;
  91              		.loc 1 29 0
  92 0064 354B     		ldr	r3, .L8+20
  93 0066 0022     		mov	r2, #0
  94 0068 DA70     		strb	r2, [r3, #3]
  30:../Sources/UART.c **** 	//UART0_C2 &= ~ (UART0_C2_TE_MASK| UART0_C2_RE_MASK);
  31:../Sources/UART.c **** 	
  32:../Sources/UART.c **** 	#if UART_MODE == INTERRUPT_MODE
  33:../Sources/UART.c **** 	enable_irq(12); 
  34:../Sources/UART.c **** 	set_irq_priority(12, 3);
  35:../Sources/UART.c **** 	#endif
  36:../Sources/UART.c **** 	UART0_BDH = 0x00;
  95              		.loc 1 36 0
  96 006a 344B     		ldr	r3, .L8+20
  97 006c 0022     		mov	r2, #0
  98 006e 1A70     		strb	r2, [r3]
  37:../Sources/UART.c **** 	UART0_BDL = 0x01;
  99              		.loc 1 37 0
 100 0070 324B     		ldr	r3, .L8+20
 101 0072 0122     		mov	r2, #1
 102 0074 5A70     		strb	r2, [r3, #1]
  38:../Sources/UART.c **** 	
  39:../Sources/UART.c **** 	UART0_C4 = UART0_C4_OSR(15);
 103              		.loc 1 39 0
 104 0076 314B     		ldr	r3, .L8+20
 105 0078 0F22     		mov	r2, #15
 106 007a 9A72     		strb	r2, [r3, #10]
  40:../Sources/UART.c **** 	UART0_C1 = 0x00;
 107              		.loc 1 40 0
 108 007c 2F4B     		ldr	r3, .L8+20
 109 007e 0022     		mov	r2, #0
 110 0080 9A70     		strb	r2, [r3, #2]
  41:../Sources/UART.c **** 	UART0_C3 = 0x00;
 111              		.loc 1 41 0
 112 0082 2E4B     		ldr	r3, .L8+20
 113 0084 0022     		mov	r2, #0
 114 0086 9A71     		strb	r2, [r3, #6]
  42:../Sources/UART.c **** 	UART0_MA1 = 0x00;
 115              		.loc 1 42 0
 116 0088 2C4B     		ldr	r3, .L8+20
 117 008a 0022     		mov	r2, #0
 118 008c 1A72     		strb	r2, [r3, #8]
  43:../Sources/UART.c **** 	UART0_MA1 = 0x00;
 119              		.loc 1 43 0
 120 008e 2B4B     		ldr	r3, .L8+20
 121 0090 0022     		mov	r2, #0
 122 0092 1A72     		strb	r2, [r3, #8]
  44:../Sources/UART.c **** 	UART0_S1 |= 0x1F;
 123              		.loc 1 44 0
 124 0094 294B     		ldr	r3, .L8+20
 125 0096 294A     		ldr	r2, .L8+20
 126 0098 1279     		ldrb	r2, [r2, #4]
 127 009a D2B2     		uxtb	r2, r2
 128 009c 1F21     		mov	r1, #31
 129 009e 0A43     		orr	r2, r1
 130 00a0 D2B2     		uxtb	r2, r2
 131 00a2 1A71     		strb	r2, [r3, #4]
  45:../Sources/UART.c **** 	UART0_S2 |= 0xC0;
 132              		.loc 1 45 0
 133 00a4 254B     		ldr	r3, .L8+20
 134 00a6 254A     		ldr	r2, .L8+20
 135 00a8 5279     		ldrb	r2, [r2, #5]
 136 00aa D2B2     		uxtb	r2, r2
 137 00ac 4021     		mov	r1, #64
 138 00ae 4942     		neg	r1, r1
 139 00b0 0A43     		orr	r2, r1
 140 00b2 D2B2     		uxtb	r2, r2
 141 00b4 5A71     		strb	r2, [r3, #5]
  46:../Sources/UART.c **** 	UART0_C5 = 0x00;
 142              		.loc 1 46 0
 143 00b6 214B     		ldr	r3, .L8+20
 144 00b8 0022     		mov	r2, #0
 145 00ba DA72     		strb	r2, [r3, #11]
  47:../Sources/UART.c **** 		
  48:../Sources/UART.c **** 	
  49:../Sources/UART.c **** 	
  50:../Sources/UART.c **** 	#if UART_MODE == INTERRUPT_MODE
  51:../Sources/UART.c **** 	UART0_C2 = UART0_C2_RIE_MASK;
  52:../Sources/UART.c **** 	#endif
  53:../Sources/UART.c **** 	
  54:../Sources/UART.c **** 	UART0_C2 |= (UART0_C2_TE_MASK| UART0_C2_RE_MASK);
 146              		.loc 1 54 0
 147 00bc 1F4B     		ldr	r3, .L8+20
 148 00be 1F4A     		ldr	r2, .L8+20
 149 00c0 D278     		ldrb	r2, [r2, #3]
 150 00c2 D2B2     		uxtb	r2, r2
 151 00c4 0C21     		mov	r1, #12
 152 00c6 0A43     		orr	r2, r1
 153 00c8 D2B2     		uxtb	r2, r2
 154 00ca DA70     		strb	r2, [r3, #3]
  55:../Sources/UART.c **** 	
  56:../Sources/UART.c **** 	#if UART_MODE == INTERRUPT_MODE
  57:../Sources/UART.c **** 	asm("CPSIE i");
  58:../Sources/UART.c **** 	#endif
  59:../Sources/UART.c **** 	
  60:../Sources/UART.c **** 	char c = 'a';
 155              		.loc 1 60 0
 156 00cc FB1D     		add	r3, r7, #7
 157 00ce 6122     		mov	r2, #97
 158 00d0 1A70     		strb	r2, [r3]
  61:../Sources/UART.c **** 	int i;
  62:../Sources/UART.c **** 	
  63:../Sources/UART.c **** 	Led_On(BLUE);
 159              		.loc 1 63 0
 160 00d2 0220     		mov	r0, #2
 161 00d4 FFF7FEFF 		bl	Led_On
 162 00d8 00E0     		b	.L6
 163              	.L7:
  64:../Sources/UART.c **** 	
  65:../Sources/UART.c **** 	while (1)
  66:../Sources/UART.c **** 	{
  67:../Sources/UART.c **** 	#if UART_MODE == POLLING_MODE
  68:../Sources/UART.c **** 		
  69:../Sources/UART.c **** 	for (i = 0; i < 200000; ++i);
  70:../Sources/UART.c **** 	
  71:../Sources/UART.c **** 	UART0_D = c++;
  72:../Sources/UART.c **** 	while(!(UART0_S1&UART0_S1_TC_MASK));
  73:../Sources/UART.c **** 	
  74:../Sources/UART.c **** 	Led_Neg(BLUE);
  75:../Sources/UART.c **** 	
  76:../Sources/UART.c **** 	if( c == 'z')
  77:../Sources/UART.c **** 		c = 'a';
  78:../Sources/UART.c **** 	#endif
  79:../Sources/UART.c **** 	}
 164              		.loc 1 79 0
 165 00da C046     		mov	r8, r8
 166              	.L6:
  69:../Sources/UART.c **** 	for (i = 0; i < 200000; ++i);
 167              		.loc 1 69 0
 168 00dc 0023     		mov	r3, #0
 169 00de 3B60     		str	r3, [r7]
 170 00e0 02E0     		b	.L2
 171              	.L3:
  69:../Sources/UART.c **** 	for (i = 0; i < 200000; ++i);
 172              		.loc 1 69 0 is_stmt 0 discriminator 2
 173 00e2 3B68     		ldr	r3, [r7]
 174 00e4 0133     		add	r3, r3, #1
 175 00e6 3B60     		str	r3, [r7]
 176              	.L2:
  69:../Sources/UART.c **** 	for (i = 0; i < 200000; ++i);
 177              		.loc 1 69 0 discriminator 1
 178 00e8 3A68     		ldr	r2, [r7]
 179 00ea 154B     		ldr	r3, .L8+24
 180 00ec 9A42     		cmp	r2, r3
 181 00ee F8DD     		ble	.L3
  71:../Sources/UART.c **** 	UART0_D = c++;
 182              		.loc 1 71 0 is_stmt 1
 183 00f0 124B     		ldr	r3, .L8+20
 184 00f2 FA1D     		add	r2, r7, #7
 185 00f4 1278     		ldrb	r2, [r2]
 186 00f6 DA71     		strb	r2, [r3, #7]
 187 00f8 FB1D     		add	r3, r7, #7
 188 00fa FA1D     		add	r2, r7, #7
 189 00fc 1278     		ldrb	r2, [r2]
 190 00fe 0132     		add	r2, r2, #1
 191 0100 1A70     		strb	r2, [r3]
  72:../Sources/UART.c **** 	while(!(UART0_S1&UART0_S1_TC_MASK));
 192              		.loc 1 72 0
 193 0102 C046     		mov	r8, r8
 194              	.L4:
  72:../Sources/UART.c **** 	while(!(UART0_S1&UART0_S1_TC_MASK));
 195              		.loc 1 72 0 is_stmt 0 discriminator 1
 196 0104 0D4B     		ldr	r3, .L8+20
 197 0106 1B79     		ldrb	r3, [r3, #4]
 198 0108 DBB2     		uxtb	r3, r3
 199 010a 1A1C     		mov	r2, r3
 200 010c 4023     		mov	r3, #64
 201 010e 1340     		and	r3, r2
 202 0110 F8D0     		beq	.L4
  74:../Sources/UART.c **** 	Led_Neg(BLUE);
 203              		.loc 1 74 0 is_stmt 1
 204 0112 0220     		mov	r0, #2
 205 0114 FFF7FEFF 		bl	Led_Neg
  76:../Sources/UART.c **** 	if( c == 'z')
 206              		.loc 1 76 0
 207 0118 FB1D     		add	r3, r7, #7
 208 011a 1B78     		ldrb	r3, [r3]
 209 011c 7A2B     		cmp	r3, #122
 210 011e DCD1     		bne	.L7
  77:../Sources/UART.c **** 		c = 'a';
 211              		.loc 1 77 0
 212 0120 FB1D     		add	r3, r7, #7
 213 0122 6122     		mov	r2, #97
 214 0124 1A70     		strb	r2, [r3]
 215              		.loc 1 79 0
 216 0126 D8E7     		b	.L7
 217              	.L9:
 218              		.align	2
 219              	.L8:
 220 0128 00700440 		.word	1074032640
 221 012c 04100000 		.word	4100
 222 0130 34100000 		.word	4148
 223 0134 10100000 		.word	4112
 224 0138 FFFFFEFF 		.word	-65537
 225 013c 00A00640 		.word	1074176000
 226 0140 3F0D0300 		.word	199999
 227              		.cfi_endproc
 228              	.LFE0:
 230              		.text
 231              	.Letext0:
 232              		.file 2 "C:/Freescale/CW MCU v10.3/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 233              		.file 3 "C:/Users/erick/Documents/Servicio/workspace/MCG/Project_Headers/MKL05Z4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 UART.c
C:\Users\erick\AppData\Local\Temp\ccCdSp79.s:18     .text.init_UART:00000000 $t
C:\Users\erick\AppData\Local\Temp\ccCdSp79.s:23     .text.init_UART:00000000 init_UART
C:\Users\erick\AppData\Local\Temp\ccCdSp79.s:220    .text.init_UART:00000128 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
Led_On
Led_Neg
